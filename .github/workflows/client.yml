name: 'Generate API client and Publish it'

on:
  workflow_dispatch:

  workflow_run:
    types:
      - completed
    workflows:
      - 'Update submodule'

jobs:
  build_api_spec:
    name: Build server API specification
    runs-on: ubuntu-latest

    env:
      SERVER_REPO: ${{ github.repository_owner }}/Server
      DB_REPO: ${{ github.repository_owner}}/DB

    steps:
      - name: Checkout server
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SERVER_REPO }}
          ref: "main"
          token: ${{ secrets.ACCESS_TOKEN }}
          path: ./server

      - name: Checkout db
        uses: actions/checkout@v4
        with:
          repository: ${{ env.DB_REPO }}
          ref: "main"
          token: ${{ secrets.ACCESS_TOKEN }}
          path: ./db

      - name: Set DB .env file
        run: |
          echo "MYSQL_PORT=3306" > ./db/.env
          echo "MYSQL_ROOT_PASSWORD=asdasd" >> ./db/.env
          echo "MYSQL_USER=asdasd" >> ./db/.env
          echo "MYSQL_PASSWORD=asdasd" >> ./db/.env
          echo "REDIS_PORT=6379"  >> ./db/.env
          echo "REDIS_PASSWORD=asdasd" >> ./db/.env
    
      - name: Run DB
        uses: isbang/compose-action@v1.5.1
        with: 
          compose-file: ./db/test-server.compose.yml
          up-flags: -d

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: corretto

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2.0.0

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.0.0

      - name: Giving permission to Gradle
        run: chmod +x ./gradlew
        working-directory: ./server

      - name: Set environment variables
        run: |
          export DB_URL="jdbc:mysql://localhost:3306/asdasd"
          export MYSQL_PASSWORD=asdasd
          export MYSQL_USER=asdasd
          export REDIS_HOST=localhost
          export REDIS_PORT=6379
          export REDIS_PASSWORD=asdasd
          export JWT_SECRET_KEY=asdasd
          export NAVER_MAIL_PASSWORD=asdasd
          export SERVER_URL="http://localhost:8080"

      - name: Build server by Gradle
        run: ./gradlew build -x test
        working-directory: ./server

      - name: Get server version
        run: |
          SERVER_VERSION=$(./gradlew properties -q | awk '/^version:/ {print $2}')
          echo "SERVER_VERSION=$SERVER_VERSION" >> $GITHUB_ENV
        working-directory: ./server

      - name: Get server name
        run: |
          SERVER_NAME=$(./gradlew properties -q | awk '/^name:/ {print $2}')
          echo "SERVER_NAME=$SERVER_NAME" >> $GITHUB_ENV
        working-directory: ./server

      - name: Get server jar name
        run: echo "JAR_NAME=$SERVER_NAME-$SERVER_VERSION.jar" >> $GITHUB_ENV

      - name: Run server
        run: |
          echo "$DB_URL"
          nohup java -jar ./build/libs/${{ env.JAR_NAME }} &
        working-directory: ./server

      - name: Wait server
        run: sleep 15s

      - name: Checkout API
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Get API specification
        run: |
          curl -o openapi.json localhost:8080/v3/api-docs

      - name: Commit API specification
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'bot@noreply.github.com'
          git add openapi.json
          git remote set-url origin https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "CI: Auto updated OpenAPI Specification" && git push || echo "No changes to commit"

  update_package_version:
    name: Update package version
    runs-on: ubuntu-latest

    needs: 
      - build_api_spec

    env:
      SERVER_REPO: ${{ github.repository_owner }}/Server

    steps:
      - name: Checkout server
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SERVER_REPO }}
          ref: "main"
          token: ${{ secrets.ACCESS_TOKEN }}
          path: ./server

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: corretto

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2.0.0

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.0.0

      - name: Giving permission to Gradle
        run: chmod +x ./gradlew
        working-directory: ./server

      - name: Get server version
        run: |
          SERVER_VERSION=$(./gradlew properties -q | awk '/^version:/ {print $2}')
          echo "SERVER_VERSION=$SERVER_VERSION" >> $GITHUB_ENV
        working-directory: ./server

      - name: Checkout API
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'

      - name: Set package version
        run: |
          node version.js ${{ env.SERVER_VERSION }}

      - name: Commit updated package version
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'bot@noreply.github.com'
          git add package.json
          git remote set-url origin https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "CI: Auto updated package version" && git push || echo "No changes to commit"

  build:
    name: 'Build API client and Publishing it'
    runs-on: ubuntu-latest

    needs:
      - update_package_version

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'

      - name: Resolve dependencies
        run: npm ci

      - name: Build API client
        run: 'npm run build'

      - name: Publishing API client to Github Package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

